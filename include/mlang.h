#ifndef MLANG_H
#define MLANG_H

typedef enum token_label { 
    // lexer labels
    IDENTIFIER = 0, 
    INTEGER_LITERAL = 1, 
    COMMA = 2, 
    ADDITION = 3, 
    SUBTRACTION = 4,
    ASTERISK = 5, 
    QUESTION_MARK = 6, 
    COMPARISON_OPERATOR = 7, 
    LOGICAL_AND = 8,
    LOGICAL_OR = 9, 
    BITWISE_AND = 10, 
    BITWISE_OR = 11, 
    COLON = 12, 
    SEMICOLON = 13,
    RIGHT_PAREN = 14, 
    LEFT_PAREN = 15, 
    RIGHT_BRACKET = 16, 
    LEFT_BRACKET = 17,
    GREATER_THAN = 18, 
    LESS_THAN = 19, 
    GREATER_THAN_OR_EQUAL = 20,
    LESS_THAN_OR_EQUAL = 21, 
    CHAR_LITERAL = 22, 
    IF = 23, 
    WHILE = 24,
    EXCLAMATION_MARK = 25,
    VAR = 26,
    RETURN = 27, 
    NEGATION_COMPARISON_OPERATOR = 28, 
    NEGATION_OPERATOR = 29,
    ASSIGNMENT_OPERATOR = 30,
    BACKSLASH = 31,
    INCRE_OPERATOR = 32,
    DECRE_OPERATOR = 33,
    STRING_LITERAL = 34,
    // parser labels
    LIBRARY = 35,
    FUNCTION = 36,
    COMPOUND_STATEMENT = 37,
    CONDITIONAL_STATEMENT = 38,
    LOOP_STATEMENT = 39,
    RETURN_STATEMENT = 40,
    VARIABLE_DEFINITION_STATEMENT = 41,
    LITERAL_EXPRESSION = 42,
    INDEXING_EXPRESSION = 43,
    FUNCTION_CALL_EXPRESSION = 44,
    DEFREF = 45,
    ADDRESS_OF = 46,
    NEGATION = 47,
    UNARY_NOT = 48,
    BEFORE_INCRE = 49,
    BEFORE_DECRE = 50,
    BINARY_COMPARISON = 51,
    BINARY_ADDITION = 52,
    BINARY_SUBTRACTION = 53,
    BINARY_MULTIPLICATION = 54,
    BINARY_DIVISION = 55,
    BINARY_LOGICAL_AND = 56,
    BINARY_LOGICAL_OR = 57,
    BINARY_BITWISE_AND = 58,
    BINARY_BITWISE_OR = 59,
    TERNARY_CONJUCTION = 60,
    // misc
    DIVISION = 97,
    NOT_EQUAL_OPERATOR = 98, // I fucked these up, will fix when not lazy
    END_OF_FILE = 99,
    INVALID = 100
} label_t;

#endif